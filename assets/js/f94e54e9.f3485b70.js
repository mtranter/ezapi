"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[776],{9613:(e,n,r)=>{r.d(n,{Zo:()=>l,kt:()=>m});var t=r(9496);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function s(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?s(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function o(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},s=Object.keys(e);for(t=0;t<s.length;t++)r=s[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(t=0;t<s.length;t++)r=s[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=t.createContext({}),p=function(e){var n=t.useContext(c),r=n;return e&&(r="function"==typeof e?e(n):i(i({},n),e)),r},l=function(e){var n=p(e.components);return t.createElement(c.Provider,{value:n},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},b=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,s=e.originalType,c=e.parentName,l=o(e,["components","mdxType","originalType","parentName"]),d=p(r),b=a,m=d["".concat(c,".").concat(b)]||d[b]||u[b]||s;return r?t.createElement(m,i(i({ref:n},l),{},{components:r})):t.createElement(m,i({ref:n},l))}));function m(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var s=r.length,i=new Array(s);i[0]=b;var o={};for(var c in n)hasOwnProperty.call(n,c)&&(o[c]=n[c]);o.originalType=e,o[d]="string"==typeof e?e:a,i[1]=o;for(var p=2;p<s;p++)i[p]=r[p];return t.createElement.apply(null,i)}return t.createElement.apply(null,r)}b.displayName="MDXCreateElement"},6593:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>s,metadata:()=>o,toc:()=>p});var t=r(1966),a=(r(9496),r(9613));const s={sidebar_position:2,slug:"ez-api-backends",description:"EZAPI Backends",title:"Basics"},i=void 0,o={unversionedId:"backends/basics",id:"backends/basics",title:"Basics",description:"EZAPI Backends",source:"@site/docs/backends/basics.md",sourceDirName:"backends",slug:"/backends/ez-api-backends",permalink:"/ezapi/backends/ez-api-backends",draft:!1,editUrl:"https://github.com/mtranter/ezapi/tree/main/docs/docs/backends/basics.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,slug:"ez-api-backends",description:"EZAPI Backends",title:"Basics"},sidebar:"tutorialSidebar",previous:{title:"Backends",permalink:"/ezapi/category/backends"}},c={},p=[{value:"Backend Basics",id:"backend-basics",level:3},{value:"Express Backend",id:"express-backend",level:4},{value:"Create a backend",id:"create-a-backend",level:3}],l={toc:p},d="wrapper";function u(e){let{components:n,...r}=e;return(0,a.kt)(d,(0,t.Z)({},l,r,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h3",{id:"backend-basics"},"Backend Basics"),(0,a.kt)("p",null,"EZApi is simply a routing DSL. It is designed to be plugable by any web backend."),(0,a.kt)("p",null,"EZApi currently ships with express, AWS Rest API GW and AWS HTTP API GW backends."),(0,a.kt)("h4",{id:"express-backend"},"Express Backend"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'import { expressMiddleware } from "@ezapi/express-backend";\nimport express from "express";\nimport bodyParser from "body-parser";\nimport { routes } from "./routes";\n\nconst mw = expressMiddleware(routes, {\n  return404IfRouteNotFound: true,\n});\n\nconst app = express();\n\n// EZApi requires the Raw body parser\napp.use(bodyParser.raw({ inflate: true, limit: "100kb", type: "*/*" }));\napp.use(mw);\n\napp.listen(5051, () => {\n  console.log("listening on 5051");\n});\n')),(0,a.kt)("h3",{id:"create-a-backend"},"Create a backend"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"Router")," instance has a simple ",(0,a.kt)("inlineCode",{parentName:"p"},"run")," function that makes it trivial to implement your own backend."),(0,a.kt)("p",null,"See the examples in GitHub for more guidance."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"type RouterRunArgs = {\n  method: string,\n  url: string,\n  headers: Record<string, string | string[]>,\n  body: string | Buffer,\n  query: Record<string, string | string[]>,\n}\n\ntype Router = {\n  run: (args: RouterRunArgs): Promise<Response<string | Buffer>>\n}\n\n")))}u.isMDXComponent=!0}}]);
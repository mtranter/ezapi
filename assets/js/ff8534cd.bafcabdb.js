"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[847],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>g});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function a(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var p=n.createContext({}),u=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},c=function(e){var t=u(e.components);return n.createElement(p.Provider,{value:t},e.children)},l="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,p=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),l=u(r),f=o,g=l["".concat(p,".").concat(f)]||l[f]||d[f]||i;return r?n.createElement(g,s(s({ref:t},c),{},{components:r})):n.createElement(g,s({ref:t},c))}));function g(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,s=new Array(i);s[0]=f;var a={};for(var p in t)hasOwnProperty.call(t,p)&&(a[p]=t[p]);a.originalType=e,a[l]="string"==typeof e?e:o,s[1]=a;for(var u=2;u<i;u++)s[u]=r[u];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},2521:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>a,toc:()=>u});var n=r(7462),o=(r(7294),r(3905));const i={title:"Testing",description:"Testing ezapi routing",slug:"testing-ez-api-routing",sidebar_position:3},s="Route Testing",a={unversionedId:"router/testing",id:"router/testing",title:"Testing",description:"Testing ezapi routing",source:"@site/docs/router/testing.md",sourceDirName:"router",slug:"/router/testing-ez-api-routing",permalink:"/ezapi/router/testing-ez-api-routing",draft:!1,editUrl:"https://github.com/mtranter/ezapi/tree/main/docs/docs/router/testing.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Testing",description:"Testing ezapi routing",slug:"testing-ez-api-routing",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Modular Apps",permalink:"/ezapi/router/ez-api-modular-routing"},next:{title:"Backends",permalink:"/ezapi/category/backends"}},p={},u=[],c={toc:u},l="wrapper";function d(e){let{components:t,...r}=e;return(0,o.kt)(l,(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"route-testing"},"Route Testing"),(0,o.kt)("p",null,"Splitting the route defintions from the route handling allows for some nice testability."),(0,o.kt)("p",null,"For example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'// api.ts\nimport { HandlersOf, RouteBuilder } from \'@ezapi/router-core\'\nexport const routeDefinitions = RouteBuilder\n  .route(\n      "getPersonById",\n      "GET",\n      "/people/{id}"\n    )\n  .route(\n    "createPerson",\n    "POST",\n    "/people"\n  )\n\nexport type ApiHandlers = HandlersOf<typeof routeDefinitions>\n\nexport const apiHandlers = (dependencies: {}): ApiHandlers => {\n  getPersonById: (req) => { ... },\n  createPerson: (req) => { ... }\n }\n\nexport const API = routeDefinitions.build(apiHandlers({}))\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'// api.spec.ts\nimport { HandlersOf, RouteBuilder, Ok } from \'@ezapi/router-core\'\nimport { routeDefinitions, ApiHandlers } from "./api";\ndescribe("routeDefinitions", () => {\n  const fakeHandlers: ApiHandlers = {\n    getPersonById: (req) => Ok(req.pathParams.id),\n    createPerson: (req) => Ok("created"),\n  };\n  const sut = routeDefinitions.build(fakeHandlers);\n  describe("getUserById", () => {\n    it("should return a user", async () => {\n      const testUserId = "123-456";\n      const response = await sut.run({\n        url: `/people/${testUserId}`,\n        method: "GET",\n        headers: {},\n        query: {},\n      });\n      expect(response?.statusCode).toBe(200);\n      expect(response?.body).toBe(testUserId);\n    });\n  });\n});\n\n')))}d.isMDXComponent=!0}}]);